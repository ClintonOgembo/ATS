@page "/client-details"
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using AttainTaskSupportSystem.Models
@inject IDbContextFactory<AttainTaskSupportSystem.Data.AttainTaskSupportSystemContext> DbFactory
@inject NavigationManager NavigationManager

<div class="header">
    <h3>Client Details</h3>
</div>

<!-- Display initial data from previous page (read-only) -->
<div class="mb-4 p-3 bg-light border rounded">
    <h5>User Information</h5>
    <div class="row">
        <div class="col-md-4">
            <strong>Full Name:</strong> @InitialData.FullName
        </div>
        <div class="col-md-4">
            <strong>Email:</strong> @InitialData.Email
        </div>
        <div class="col-md-4">
            <strong>Role:</strong> @InitialData.Role
        </div>
    </div>
</div>

<EditForm method="post" Model="ClientExtra" OnValidSubmit="SaveClient" FormName="saveClient">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="address" class="form-label">Address</label>
        <InputText id="address" class="form-control" @bind-Value="ClientExtra.Address" />
        <ValidationMessage For="@(() => ClientExtra.Address)" />
    </div>

    <div class="mb-3">
        <label for="telephone" class="form-label">Telephone</label>
        <InputText id="telephone" class="form-control" @bind-Value="ClientExtra.Telephone" />
        <ValidationMessage For="@(() => ClientExtra.Telephone)" />
    </div>

    <button type="submit" class="btn btn-primary">Save Client</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public ClientDetailsModel ClientExtra { get; set; } = new();

    // Store initial data from query parameters
    private InitialUserData InitialData { get; set; } = new();

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("fullName", out var fullName))
            InitialData.FullName = fullName.ToString();

        if (queryParams.TryGetValue("email", out var email))
            InitialData.Email = email.ToString();

        if (queryParams.TryGetValue("role", out var role))
            InitialData.Role = role.ToString();

        if (string.IsNullOrEmpty(InitialData.FullName) ||
            string.IsNullOrEmpty(InitialData.Email) ||
            string.IsNullOrEmpty(InitialData.Role))
        {
            // Redirect back if no initial data
            NavigationManager.NavigateTo("/admins/create");
        }
    }

    public async Task SaveClient()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            // Create the Admin/Client entity (assuming your Admin table is used for all roles)
            var client = new Admin
                {
                    FullName = InitialData.FullName,
                    Email = InitialData.Email,
                    Role = InitialData.Role,
                    Address = ClientExtra.Address,
                    Telephone = ClientExtra.Telephone
                };

            context.Admin.Add(client);
            await context.SaveChangesAsync();

            Console.WriteLine($"Client saved successfully: {InitialData.FullName}, Address={ClientExtra.Address}, Telephone={ClientExtra.Telephone}");

            // Navigate back to admin list (or success page)
            NavigationManager.NavigateTo("/admins");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving client: {ex.Message}");
        }
    }

    public class ClientDetailsModel
    {
        [Required(ErrorMessage = "Address is required")]
        [StringLength(30, ErrorMessage = "Address cannot exceed 30 characters")]
        public string Address { get; set; } = string.Empty;

        [Required(ErrorMessage = "Telephone is required")]
        [Phone(ErrorMessage = "Please enter a valid telephone number")]
        [StringLength(12, ErrorMessage = "Telephone cannot exceed 12 characters")]
        public string Telephone { get; set; } = string.Empty;
    }

    public class InitialUserData
    {
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }
}
