@page "/client-details"
@inject NavigationManager NavigationManager

<div class="header">
    <h3>Client Details</h3>
</div>

<EditForm method="post" Model="ClientExtra" OnValidSubmit="SaveClient" FormName="saveClient">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="ClientID" class="form-label">Client ID</label>
        <InputNumber id="ClientID" class="form-control" @bind-Value="ClientExtra.ClientID" />
        <ValidationMessage For="@(() => ClientExtra.ClientID)" />
    </div>

    <div class="mb-3">
        <label for="address" class="form-label">Address</label>
        <InputText id="address" class="form-control" @bind-Value="ClientExtra.Address" />
        <ValidationMessage For="@(() => ClientExtra.Address)" />
    </div>

    <div class="mb-3">
        <label for="telephone" class="form-label">Telephone</label>
        <InputText id="telephone" class="form-control" @bind-Value="ClientExtra.Telephone" />
        <ValidationMessage For="@(() => ClientExtra.Telephone)" />
    </div>

    <button type="submit" class="btn btn-primary">Save Client</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public ClientDetailsModel ClientExtra { get; set; } = new();

    public async Task SaveClient()
    {
        try
        {
            Console.WriteLine($"Client saved: ID={ClientExtra.ClientID}, Address={ClientExtra.Address}, Telephone={ClientExtra.Telephone}");

            // Add your actual save logic here (database call, API call, etc.)
            await Task.Delay(100); // Simulate async operation

            // Navigation should work properly with server-side forms
            NavigationManager.NavigateTo("/admins");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving client: {ex.Message}");
            // Handle error appropriately
        }
    }

    public class ClientDetailsModel
    {
        [Required(ErrorMessage = "Client ID is required")]
        [Range(1, int.MaxValue, ErrorMessage = "Client ID must be a positive number")]
        public int ClientID { get; set; }

        [Required(ErrorMessage = "Address is required")]
        [StringLength(30, ErrorMessage = "Address cannot exceed 30 characters")]
        public string Address { get; set; } = string.Empty;

        [Required(ErrorMessage = "Telephone is required")]
        [Phone(ErrorMessage = "Please enter a valid telephone number")]
        [StringLength(12, ErrorMessage = "Telephone cannot exceed 12 characters")]
        public string Telephone { get; set; } = string.Empty;
    }
}