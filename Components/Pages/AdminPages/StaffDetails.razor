@page "/staff-details"
@using Microsoft.EntityFrameworkCore
@using AttainTaskSupportSystem.Models
@using Microsoft.AspNetCore.WebUtilities
@inject IDbContextFactory<AttainTaskSupportSystem.Data.AttainTaskSupportSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Staff Details</PageTitle>

<div class="header">
    <h1>Staff Details</h1>
</div>
<hr />

<!-- Display initial data from previous page (read-only) -->
<div class="mb-4 p-3 bg-light border rounded">
    <h5>User Information</h5>
    <div class="row">
        <div class="col-md-4">
            <strong>Full Name:</strong> @InitialData.FullName
        </div>
        <div class="col-md-4">
            <strong>Email:</strong> @InitialData.Email
        </div>
        <div class="col-md-4">
            <strong>Role:</strong> @InitialData.Role
        </div>
    </div>
</div>

<EditForm method="post" Model="StaffExtra" OnValidSubmit="SaveStaff" FormName="saveStaff">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="department" class="form-label">Department</label>
        <InputSelect id="department" class="form-control" @bind-Value="StaffExtra.Department">
            <option value="">---Select Department---</option>
            <option value="1">HR</option>
            <option value="2">Frontend</option>
            <option value="3">UI/UX</option>
            <option value="4">Finance</option>
            <option value="5">Marketing</option>
        </InputSelect>
        <ValidationMessage For="@(() => StaffExtra.Department)" />
    </div>
    <div class="mb-3">
        <label for="address" class="form-label">Address</label>
        <InputText id="address" class="form-control" @bind-Value="StaffExtra.Address" />
        <ValidationMessage For="@(() => StaffExtra.Address)" />
    </div>
    <div class="mb-3">
        <label for="telephone" class="form-label">Telephone</label>
        <InputText id="telephone" class="form-control" @bind-Value="StaffExtra.Telephone" />
        <ValidationMessage For="@(() => StaffExtra.Telephone)" />
    </div>
    <button type="submit" class="btn btn-primary">Save Staff</button>
</EditForm>

<div class="mt-3">
    <a href="/admins/create" class="btn btn-secondary">Back to Create User</a>
</div>

@code {
    [SupplyParameterFromForm]
    public StaffDetailsModel StaffExtra { get; set; } = new();

    // Store initial data from query parameters
    private InitialUserData InitialData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Parse query parameters to get initial data
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("fullName", out var fullName))
            InitialData.FullName = fullName.ToString();

        if (queryParams.TryGetValue("email", out var email))
            InitialData.Email = email.ToString();

        if (queryParams.TryGetValue("role", out var role))
            InitialData.Role = role.ToString();

        // Validate that we have the required initial data
        if (string.IsNullOrEmpty(InitialData.FullName) ||
            string.IsNullOrEmpty(InitialData.Email) ||
            string.IsNullOrEmpty(InitialData.Role))
        {
            // Redirect back if no initial data
            NavigationManager.NavigateTo("/admins/create");
        }
    }

    public async Task SaveStaff()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            // Create the Admin entity with both initial and additional data
            var admin = new Admin
                {
                    FullName = InitialData.FullName,
                    Email = InitialData.Email,
                    Role = InitialData.Role,
                    // Map the staff-specific fields to your Admin model properties
                    // You might need to add these properties to your Admin model:
                    Department = GetDepartmentName(StaffExtra.Department),
                    Address = StaffExtra.Address,
                    Telephone = StaffExtra.Telephone,
                };

            context.Admin.Add(admin);
            await context.SaveChangesAsync();

            Console.WriteLine($"Staff saved successfully: {InitialData.FullName} - Department: {GetDepartmentName(StaffExtra.Department)}");

            // Navigate to success page or admin list
            NavigationManager.NavigateTo("/admins");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving staff: {ex.Message}");
            // You might want to show an error message to the user
        }
    }

    private string GetDepartmentName(string departmentId)
    {
        return departmentId switch
        {
            "1" => "HR",
            "2" => "Frontend",
            "3" => "UI/UX",
            "4" => "Finance",
            "5" => "Marketing",
            _ => ""
        };
    }

    public class StaffDetailsModel
    {
        [Required(ErrorMessage = "Department is required")]
        public string Department { get; set; } = string.Empty;

        [Required(ErrorMessage = "Address is required")]
        [StringLength(30, ErrorMessage = "Address cannot exceed 30 characters")]
        public string Address { get; set; } = string.Empty;

        [Required(ErrorMessage = "Telephone is required")]
        [Phone(ErrorMessage = "Please enter a valid telephone number")]
        [StringLength(12, ErrorMessage = "Telephone cannot exceed 12 characters")]
        public string Telephone { get; set; } = string.Empty;
    }

    public class InitialUserData
    {
        public string FullName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }
}