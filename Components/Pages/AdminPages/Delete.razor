@page "/admins/delete"
@using Microsoft.EntityFrameworkCore
@using AttainTaskSupportSystem.Models
@inject IDbContextFactory<AttainTaskSupportSystem.Data.AttainTaskSupportSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<div class="header">
    <h1>Delete</h1>
</div>

<p>Are you sure you want to delete this?</p>
<div>
    <hr />
    @if (admin is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FullName</dt>
            <dd class="col-sm-10">@admin.FullName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@admin.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">role</dt>
            <dd class="col-sm-10">@admin.Role</dd>
        </dl>
        <EditForm method="post" Model="admin" OnValidSubmit="DeleteAdmin" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(admin is null)">Delete</button> |
            <a href="/admins">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Admin? admin;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        admin = await context.Admin.FirstOrDefaultAsync(m => m.Id == Id);

        if (admin is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAdmin()
    {
        using var context = DbFactory.CreateDbContext();
        context.Admin.Remove(admin!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/admins");
    }
}
